package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"
	"time"
)

func main() {
	version := "dev"
	if gitVersion, err := runCommand("git", "describe", "--tags", "--always", "--dirty"); err == nil {
		version = strings.TrimSpace(gitVersion)
	}

	commit := "unknown"
	if gitCommit, err := runCommand("git", "rev-parse", "--short", "HEAD"); err == nil {
		commit = strings.TrimSpace(gitCommit)
	}

	date := time.Now().UTC().Format(time.RFC3339)

	content := fmt.Sprintf(`// Code generated by go generate; DO NOT EDIT.
package main

import "fmt"

var (
	buildVersion = %q
	buildDate    = %q
	buildCommit  = %q
)
func init() {
	fmt.Printf("Build version=%%v, date=%%v, commit=%%v\n", buildVersion, buildDate, buildCommit)
}
`, version, date, commit)
	const perm = 0600
	err := os.WriteFile("version.go", []byte(content), perm)
	if err != nil {
		log.Fatalf("Failed to write version.go: %v", err)
	}
}

func runCommand(name string, args ...string) (string, error) {
	cmd := exec.Command(name, args...)
	output, err := cmd.CombinedOutput()
	if err != nil {
		return "", fmt.Errorf("command %s %v failed: %v, output: %s", name, args, err, output)
	}
	return string(output), nil
}
