// Code generated by MockGen. DO NOT EDIT.
// Source: finder.go
//
// Generated by this command:
//
//	mockgen -source=finder.go -destination=mocks/mock_finder.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/korobkovandrey/runtime-metrics/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockFinderRepository is a mock of FinderRepository interface.
type MockFinderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFinderRepositoryMockRecorder
	isgomock struct{}
}

// MockFinderRepositoryMockRecorder is the mock recorder for MockFinderRepository.
type MockFinderRepositoryMockRecorder struct {
	mock *MockFinderRepository
}

// NewMockFinderRepository creates a new mock instance.
func NewMockFinderRepository(ctrl *gomock.Controller) *MockFinderRepository {
	mock := &MockFinderRepository{ctrl: ctrl}
	mock.recorder = &MockFinderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinderRepository) EXPECT() *MockFinderRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockFinderRepository) Find(ctx context.Context, mr *model.MetricRequest) (*model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, mr)
	ret0, _ := ret[0].(*model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr_2 *MockFinderRepositoryMockRecorder) Find(ctx, mr any) *gomock.Call {
	mr_2.mock.ctrl.T.Helper()
	return mr_2.mock.ctrl.RecordCallWithMethodType(mr_2.mock, "Find", reflect.TypeOf((*MockFinderRepository)(nil).Find), ctx, mr)
}

// FindAll mocks base method.
func (m *MockFinderRepository) FindAll(ctx context.Context) ([]*model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].([]*model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockFinderRepositoryMockRecorder) FindAll(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFinderRepository)(nil).FindAll), ctx)
}
