// Code generated by MockGen. DO NOT EDIT.
// Source: batchupdater.go
//
// Generated by this command:
//
//	mockgen -source=batchupdater.go -destination=mocks/mock_batchupdater.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/korobkovandrey/runtime-metrics/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBatchUpdaterRepository is a mock of BatchUpdaterRepository interface.
type MockBatchUpdaterRepository struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockBatchUpdaterRepositoryMockRecorder
}

// MockBatchUpdaterRepositoryMockRecorder is the mock recorder for MockBatchUpdaterRepository.
type MockBatchUpdaterRepositoryMockRecorder struct {
	mock *MockBatchUpdaterRepository
}

// NewMockBatchUpdaterRepository creates a new mock instance.
func NewMockBatchUpdaterRepository(ctrl *gomock.Controller) *MockBatchUpdaterRepository {
	mock := &MockBatchUpdaterRepository{ctrl: ctrl}
	mock.recorder = &MockBatchUpdaterRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchUpdaterRepository) EXPECT() *MockBatchUpdaterRepositoryMockRecorder {
	return m.recorder
}

// CreateOrUpdateBatch mocks base method.
func (m *MockBatchUpdaterRepository) CreateOrUpdateBatch(ctx context.Context, mrs []*model.MetricRequest) ([]*model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateBatch", ctx, mrs)
	ret0, _ := ret[0].([]*model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateBatch indicates an expected call of CreateOrUpdateBatch.
func (mr *MockBatchUpdaterRepositoryMockRecorder) CreateOrUpdateBatch(ctx, mrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateBatch", reflect.TypeOf((*MockBatchUpdaterRepository)(nil).CreateOrUpdateBatch), ctx, mrs)
}

// FindBatch mocks base method.
func (m *MockBatchUpdaterRepository) FindBatch(ctx context.Context, mrs []*model.MetricRequest) ([]*model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBatch", ctx, mrs)
	ret0, _ := ret[0].([]*model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBatch indicates an expected call of FindBatch.
func (mr *MockBatchUpdaterRepositoryMockRecorder) FindBatch(ctx, mrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBatch", reflect.TypeOf((*MockBatchUpdaterRepository)(nil).FindBatch), ctx, mrs)
}
