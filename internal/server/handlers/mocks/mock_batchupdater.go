// Code generated by MockGen. DO NOT EDIT.
// Source: updates.go
//
// Generated by this command:
//
//	mockgen -source=updates.go -destination=mocks/mock_batchupdater.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/korobkovandrey/runtime-metrics/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockBatchUpdater is a mock of BatchUpdater interface.
type MockBatchUpdater struct {
	isgomock struct{}
	ctrl     *gomock.Controller
	recorder *MockBatchUpdaterMockRecorder
}

// MockBatchUpdaterMockRecorder is the mock recorder for MockBatchUpdater.
type MockBatchUpdaterMockRecorder struct {
	mock *MockBatchUpdater
}

// NewMockBatchUpdater creates a new mock instance.
func NewMockBatchUpdater(ctrl *gomock.Controller) *MockBatchUpdater {
	mock := &MockBatchUpdater{ctrl: ctrl}
	mock.recorder = &MockBatchUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchUpdater) EXPECT() *MockBatchUpdaterMockRecorder {
	return m.recorder
}

// UpdateBatch mocks base method.
func (m *MockBatchUpdater) UpdateBatch(arg0 context.Context, arg1 []*model.MetricRequest) ([]*model.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", arg0, arg1)
	ret0, _ := ret[0].([]*model.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockBatchUpdaterMockRecorder) UpdateBatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockBatchUpdater)(nil).UpdateBatch), arg0, arg1)
}
